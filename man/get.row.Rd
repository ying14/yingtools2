% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/yingtools2.R
\name{get.row}
\alias{get.row}
\title{Get Rows (optimized for timeline plots)}
\usage{
get.row(start, stop, row = NULL, by = NULL, row.overlap = TRUE, min.gap = Inf)
}
\arguments{
\item{start}{vector of event start times (numeric or Date).}

\item{stop}{vector of event stop times (numeric or Date).}

\item{row}{vector of event types. Can be a list of more than one vector.}

\item{by}{optional grouping variable (vector or list of vectors), where events of the same group will be kept to together. Default is \code{NULL}}

\item{row.overlap}{whether or not the same row value can overlap. \code{TRUE}: each row value is always one row and can overlap, FALSE: rows do not overlap and can occupy several rows if necessary}

\item{min.gap}{the minimum gap allowed before 2 different row values can be combined. \code{Inf}: different row values can never share the same row position. \code{0}: fit different rows as much as possible.}
}
\value{
Returns a vector of row number assignments for each time event.
}
\description{
Given timeline event data with event type labels and start/stop times, calculate rows.
If requested, this will attempt to save vertical plot space by placing two event types on the same row, where possible.
}
\details{
Note that \code{get.row()} is used in \code{\link[=geom_timeline]{geom_timeline()}}.
}
\examples{
library(tidyverse)
library(gridExtra)

plot.meds <- function(data,title) {
  ggplot(data) +
    geom_rect(aes(xmin=startday-0.45,xmax=endday+0.45,ymin=row-0.45,ymax=row+0.45,fill=med.class),alpha=0.7) +
    geom_text(aes(x=midpoint(startday,endday),y=row,label=med.clean)) +
    ggtitle(title)
}
pt.meds <- cid.meds \%>\% filter(Patient_ID=="157")

# strictly one row per med (row.overlap=TRUE and min.gap=Inf), arranged by class
pt.meds \%>\%
  mutate(row=get.row(startday,endday,row=med.clean,by=med.class)) \%>\%
  plot.meds("strictly one row per med\n(row.overlap=TRUE and min.gap=Inf), arranged by class")
# same meds are in different rows, if they overlap\nthe same time (row.overlap=TRUE)
pt.meds \%>\%
  mutate(row=get.row(startday,endday,row=med.clean,by=med.class,row.overlap=TRUE)) \%>\%
  plot.meds("same meds are in different rows, if they overlap\nthe same time (row.overlap=TRUE)")
# To save space, different meds can be in the same row,\nas long as they are sufficiently separated (min.gap=1)
pt.meds \%>\%
  mutate(row=get.row(startday,endday,row=med.clean,min.gap=1,by=med.class)) \%>\%
  plot.meds("To save space, different meds can be in the same row,\nas long as they are sufficiently separated (min.gap=1)")
# Arrange everything in as few rows as possible\n(row=NULL, by=NULL, row.overlap=FALSE)
pt.meds \%>\%
  mutate(row=get.row(startday,endday,no.row.overlap=TRUE)) \%>\%
  plot.meds("Arrange everything in as few rows as possible\n(row=NULL, by=NULL, row.overlap=FALSE)")
}
