% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/yingtools2.R
\name{inner_join_replace}
\alias{inner_join_replace}
\alias{left_join_replace}
\alias{right_join_replace}
\alias{full_join_replace}
\title{Inner/Left/Right/Full Join with Replace}
\usage{
inner_join_replace(
  x,
  y,
  by = NULL,
  conflict = c("yonly", "xonly", "ycoalesce", "xcoalesce", "error"),
  keep = FALSE,
  status = FALSE
)

left_join_replace(
  x,
  y,
  by = NULL,
  conflict = c("yonly", "xonly", "ycoalesce", "xcoalesce", "error"),
  keep = FALSE,
  status = FALSE
)

right_join_replace(
  x,
  y,
  by = NULL,
  conflict = c("xonly", "yonly", "xcoalesce", "ycoalesce", "error"),
  keep = FALSE,
  status = FALSE
)

full_join_replace(
  x,
  y,
  by = NULL,
  conflict = c("yonly", "xonly", "ycoalesce", "xcoalesce", "error"),
  keep = FALSE,
  status = FALSE
)
}
\arguments{
\item{x}{first data frame to be joined}

\item{y}{second data frame to be joined}

\item{by}{a character vector of variables to be joined by.}

\item{conflict}{what to do if columns conflict.
\enumerate{
\item \code{y} always keep the y-value (default).
\item \code{x} always keep the x-value.
\item \code{ycoalesce} keep the y-value unless it is \code{NA}.
\item \code{xcoalesce} keep the x-value unless it is \code{NA}.
\item \code{error} throw error if there is a conflict.
}}

\item{keep}{Should the join keys from both \code{x} and \code{y} be preserved in the output?}

\item{status}{Whether to include a column \code{.status} which shows join status. Default is \code{FALSE}.}
}
\description{
Same as \code{inner_join}, \code{left_join}, \code{right_join}, and \code{full_join} in the \code{dplyr} package, except that variables with the
same column name will not be renamed with the ".x" and ".y" suffix.
Instead, the variables will be turned into one column if the variables are equal. If they are not equal, an error (or warning) is thrown.
}
\details{
This is a convenience function that just avoids the renaming of columns.
}
\examples{
tbl1 <- tibble(id=1:10) \%>\% mutate(source="table1")
tbl2 <- tibble(id=5:15) \%>\% mutate(source="table2")
full_join(tbl1,tbl2,by="id")
full_join_replace(tbl1,tbl2,by="id") \%>\% arrange(id)
}
