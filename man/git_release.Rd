% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_release.R
\name{upload_git_release}
\alias{upload_git_release}
\alias{download_git_release}
\title{Download/Upload Git Release Ddata}
\usage{
upload_git_release(
  files,
  tag = "v0.0.0.1",
  generate_load_script = "R/run_this_to_download_data.R",
  path = ".",
  repo = get_gitrepo(path = path),
  api = get_gitapi(path = path),
  token = get_gittoken(path = path)
)

download_git_release(
  tag = "latest",
  dest = "data",
  path = ".",
  repo = get_gitrepo(path = path),
  api = get_gitapi(path = path),
  token = get_gittoken(path = path)
)
}
\arguments{
\item{files}{Files to be uploaded.}

\item{tag}{The tag version to download. Default is to use \code{"v1.0"} when uploading, or \code{"latest"} (i.e. latest version) when downloading.}

\item{path}{Path of the git repo. Default is current directory, \code{"."}}

\item{repo}{string: GH repository name in format \code{"owner/repo"}. Default is to guess based on \code{path}.}

\item{api}{GitHub API URL. For standard Github this would be \code{"https://api.github.com"},
but in Github Enterprise this would be something like \code{"https://github.XXXXX.org/api/v3"}.
Default is to guess based on info in the Git repo \code{path}.}

\item{token}{Personal access token (PAT). These credentials may be needed, depending on the operation and repo.
Default is to use \code{\link[gh:gh_token]{gh::gh_token()}}, if it exists, or \code{NULL} otherwise.}

\item{dest}{The folder where release data will be saved. Default is \code{data}.}
}
\description{
Use these functions to store/access data on Git repositories, through release asset.
This essentially what \href{https://github.com/ropensci/piggyback}{\code{piggyback}} does, but with modifications to work with Github Enterprise servers.
}
\details{
Storing data on Github repostories is quite limited, to 50 Mb per file. Also, each time you push a new version of the data,
there are multiple copies which can accumulate over time. However, you can upload the data as a \emph{release asset}, which does not
have size limits, and which can be overwritten each time, so as to avoid duplicate copies.

The \href{https://github.com/ropensci/piggyback}{\code{piggyback}} package has great functions to take advantage of the \emph{release asset} feature.
However, it currently only works with Github, and does not play well with Github Enterprise.
These functions represent modifications to make it work, and to streamline the upload/download process.
}
\examples{
\dontrun{
mt1 <- mtcars \%>\% mutate(version=1)
iris1 <- iris \%>\% mutate(version=1)
write_csv(mt1,file="mt1.csv")
write_csv(iris1,file="iris1.csv")
upload_git_release(c("mt1.csv","iris1.csv"))
download_git_release()
}
}
