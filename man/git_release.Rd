% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_release.R
\name{upload_git_release}
\alias{upload_git_release}
\alias{download_git_release}
\title{Download/Upload Git Release Ddata}
\usage{
upload_git_release(
  files = "release_data",
  path = here::here(),
  tag = "v0.0.0.1",
  generate_load_script = "R/run_this_to_download_data.R",
  repo = get_gitrepo(path = path),
  api = get_gitapi(path = path),
  token = get_gittoken(path = path)
)

download_git_release(
  tag = "v0.0.0.1",
  dest = "release_data",
  path = here::here(),
  repo = get_gitrepo(path = path),
  api = get_gitapi(path = path),
  token = get_gittoken(path = path)
)
}
\arguments{
\item{files}{File(s) or folder(s) to be uploaded (absolute path or relative to \code{path}).
Default is to upload all files found in \verb{<path>/release_data}.}

\item{path}{Path of the git repo. Default is current project's directory, \code{here::here()}.}

\item{tag}{The tag version to upload/download. Default is to use \code{"v0.0.0.1"}.
When downloading, can specify \code{"latest"} (i.e. latest version).}

\item{repo}{string: GH repository name in format \code{"owner/repo"}. Default is to guess based on \code{path}.}

\item{api}{GitHub API URL. For standard Github this would be \code{"https://api.github.com"},
but in Github Enterprise this would be something like \code{"https://github.XXXXX.org/api/v3"}.
Default is to guess based on info in the Git repo \code{path}.}

\item{token}{Personal access token (PAT). These credentials may be needed, depending on the operation and repo.
Default is to use \code{\link[gh:gh_token]{gh::gh_token()}}, if it exists, or \code{NULL} otherwise.}

\item{dest}{The folder where release data will be saved. Default is \code{release_data}.}
}
\description{
Use these functions to store/access data on Git repositories, through release asset.
This essentially what \href{https://github.com/ropensci/piggyback}{\code{piggyback}} does, but with modifications to work with Github Enterprise servers.
}
\details{
Storing data on Github repostories is quite limited, to 50 Mb per file. Also, each time you push a new version of the data,
there are multiple copies which can accumulate over time. However, you can upload the data as a \emph{release asset}, which does not
have size limits, and which can be overwritten each time, so as to avoid duplicate copies.

The \href{https://github.com/ropensci/piggyback}{\code{piggyback}} package has great functions to take advantage of the \emph{release asset} feature.
However, it currently only works with Github, and does not play well with Github Enterprise.
These functions represent modifications to make it work, and to streamline the upload/download process.

Some of the default settings are useful for avoiding potential issues.
The default \code{tag} of \code{"v0.0.0.1"} is good in case the Git repo/project is an
R package with formal releases, where automated systems are looking for latest version
and you would not want it to pick up the release data by accident.
Data is stored in the default \code{dest} location \code{release_data}.

You probably want to avoid storing in \code{data}, because if the repo/project is an
R package, it will try to include the release data in the package during
build (changing .Rbuildignore doesn't seem to work).
}
\examples{
\dontrun{
mt1 <- mtcars \%>\% mutate(version=1)
iris1 <- iris \%>\% mutate(version=1)
# save files to the /data folder
write_csv(mt1,file="data/mt1.csv")
write_csv(iris1,file="data/iris1.csv")
# upload files in /data to Github as a release
upload_git_release()

# In a system that doesn't have the data, download files from Github
download_git_release()
}
}
