% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/yingtools2.R
\name{geom_timeline}
\alias{geom_timeline}
\title{Plot timeline bars}
\usage{
geom_timeline(
  mapping = NULL,
  data = NULL,
  stat = "timeline",
  position = "identity",
  ...,
  merge = FALSE,
  min.gap = Inf,
  row.overlap = TRUE,
  check_overlap = FALSE,
  merge.gap = 1,
  linejoin = "mitre",
  na.rm = FALSE,
  show.legend = NA,
  parse = FALSE,
  inherit.aes = TRUE
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{stat}{The statistical transformation to use on the data for this layer.
When using a \verb{geom_*()} function to construct a layer, the \code{stat}
argument can be used the override the default coupling between geoms and
stats. The \code{stat} argument accepts the following:
\itemize{
\item A \code{Stat} ggproto subclass, for example \code{StatCount}.
\item A string naming the stat. To give the stat as a string, strip the
function name of the \code{stat_} prefix. For example, to use \code{stat_count()},
give the stat as \code{"count"}.
\item For more information and other ways to specify the stat, see the
\link[ggplot2:layer_stats]{layer stat} documentation.
}}

\item{position}{A position adjustment to use on the data for this layer. This
can be used in various ways, including to prevent overplotting and
improving the display. The \code{position} argument accepts the following:
\itemize{
\item The result of calling a position function, such as \code{position_jitter()}.
This method allows for passing extra arguments to the position.
\item A string naming the position adjustment. To give the position as a
string, strip the function name of the \code{position_} prefix. For example,
to use \code{position_jitter()}, give the position as \code{"jitter"}.
\item For more information and other ways to specify the position, see the
\link[ggplot2:layer_positions]{layer position} documentation.
}}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}'s \code{params} argument. These
arguments broadly fall into one of 4 categories below. Notably, further
arguments to the \code{position} argument, or aesthetics that are required
can \emph{not} be passed through \code{...}. Unknown arguments that are not part
of the 4 categories below are ignored.
\itemize{
\item Static aesthetics that are not mapped to a scale, but are at a fixed
value and apply to the layer as a whole. For example, \code{colour = "red"}
or \code{linewidth = 3}. The geom's documentation has an \strong{Aesthetics}
section that lists the available options. The 'required' aesthetics
cannot be passed on to the \code{params}. Please note that while passing
unmapped aesthetics as vectors is technically possible, the order and
required length is not guaranteed to be parallel to the input data.
\item When constructing a layer using
a \verb{stat_*()} function, the \code{...} argument can be used to pass on
parameters to the \code{geom} part of the layer. An example of this is
\code{stat_density(geom = "area", outline.type = "both")}. The geom's
documentation lists which parameters it can accept.
\item Inversely, when constructing a layer using a
\verb{geom_*()} function, the \code{...} argument can be used to pass on parameters
to the \code{stat} part of the layer. An example of this is
\code{geom_area(stat = "density", adjust = 0.5)}. The stat's documentation
lists which parameters it can accept.
\item The \code{key_glyph} argument of \code{\link[ggplot2:layer]{layer()}} may also be passed on through
\code{...}. This can be one of the functions described as
\link[ggplot2:draw_key]{key glyphs}, to change the display of the layer in the legend.
}}

\item{merge}{whether or not to merge adjacent/overlapping bars into 1 row before plotting (using \code{\link[=group_by_time]{group_by_time()}}). Default is \code{TRUE}.
Note that merging only occurs if the bars are overlapping, and have the same label and fill.}

\item{min.gap}{The allowable gap before two distinct rows are fitted on the same row, expressed as a proportion of the X-axis length. Note that this different than direct use of \code{\link[=get.row]{get.row()}}}

\item{row.overlap}{whether or not the same row value can overlap. \code{TRUE}: each row value is always one row and can overlap, FALSE: rows do not overlap and can occupy several rows if necessary}

\item{check_overlap}{If \code{TRUE}, text that overlaps previous text in the
same layer will not be plotted. \code{check_overlap} happens at draw time and in
the order of the data. Therefore data should be arranged by the label
column before calling \code{geom_text()}. Note that this argument is not
supported by \code{geom_label()}.}

\item{merge.gap}{if \code{merge=TRUE}, the maximum distance between two bars that are merged. Default is \code{1}.}

\item{linejoin}{Line join style (round, mitre, bevel).}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{parse}{If \code{TRUE}, the labels will be parsed into expressions and
displayed as described in \code{?plotmath}.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}
}
\description{
Plot timeline items in the form of bars, such as medication administration over time. The X-axis represents time.
}
\details{
This custom geom uses \code{\link[=get.row]{get.row()}} to arrange the timeline events into rows, where aesthetics are mapped
to the function parameters:
\itemize{
\item \code{aes(xmin=)} is mapped to \code{get.row(start=)}
\item \code{aes(xmax=)} is mapped to \code{get.row(xstop=)}
\item \code{aes(label=)} is mapped to \code{get.row(row=)}
\item \code{aes(by=)} is mapped to \code{get.row(by=)}
}

Some data prepping is done prior to plotting:
\enumerate{
\item Merge any timeline events that overlap using \code{\link[=group_by_time]{group_by_time()}} (optional step if \code{merge=TRUE})
\item Pad each event by +/- 0.45 days so that they span the length of the days they occur on, and so single day events do not have zero width.
\item Determine Y = row position for all events, using \code{\link[=get.row]{get.row()}}, using above aesthetic mappings.
\item Calculate X midpoint of each timeline event, for plotting of the label.
If X-axis transformations are used (e.g. \code{\link[=scale_x_timebar]{scale_x_timebar()}}), note that merging (#1) and padding (#2) are done
on un-transformed data, whereas \code{get.row()} (#3) and midpoint (#4) are done after transformation. This is more
seamless compared with the hassle of doing manually.
}
}
\section{Aesthetics}{

\code{geom_timeline()} understands the following aesthetics (required aesthetics are in bold):
\itemize{
\item \strong{\code{\link[=aes_position]{xmin}}}
\item \strong{\code{\link[=aes_position]{xmax}}}
\item \code{\link[=aes_colour_fill_alpha]{alpha}}
\item \code{angle}
\item \code{by}
\item \code{\link[=aes_colour_fill_alpha]{colour}}
\item \code{family}
\item \code{\link[=aes_colour_fill_alpha]{fill}}
\item \code{fontalpha}
\item \code{fontcolour}
\item \code{fontface}
\item \code{\link[=aes_group_order]{group}}
\item \code{hjust}
\item \code{label}
\item \code{lineheight}
\item \code{\link[=aes_linetype_size_shape]{linetype}}
\item \code{\link[=aes_linetype_size_shape]{linewidth}}
\item \code{\link[=aes_linetype_size_shape]{size}}
\item \code{vjust}
}
Learn more about setting these aesthetics in \code{vignette("ggplot2-specs")}.
}

\examples{
library(tidyverse)
data <- cid.meds \%>\% filter(Patient_ID=="166")
# Standard timeline plot without much cleanup
ggplot(data) + geom_timeline(aes(xmin=startday,xmax=endday,
                                 label=med.clean,by=med.class,fill=med.class),alpha=0.7)

# Make it look nice and clean with merge and check_overlap, use min.gap to share rows where possible.
ggplot(data) + geom_timeline(aes(xmin=startday,xmax=endday,
                                 label=med.clean,by=med.class,fill=med.class),alpha=0.7,
                             merge=TRUE,check_overlap=TRUE,min.gap=0.15)

# To see all events separately (even same labelled events never overlap), use row.overlap=FALSE
ggplot(data) + geom_timeline(aes(xmin=startday,xmax=endday,
                                 label=med.clean,by=med.class,fill=med.class),alpha=0.7,
                             row.overlap = FALSE)

# To fit in as few rows as possible, try removing by, and set min.gap=0 and merge=TRUE.
ggplot(data) + geom_timeline(aes(xmin=startday,xmax=endday,
                                 label=med.clean,fill=med.class),alpha=0.7,
                             merge=TRUE,min.gap=0,check_overlap=TRUE)
}
