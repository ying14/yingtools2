% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/microbiota2.R
\name{lefse.prep}
\alias{lefse.prep}
\title{LEfSe prep}
\usage{
lefse.prep(
  phy,
  class,
  subclass = NA,
  subject = NA,
  anova.alpha = 0.05,
  wilcoxon.alpha = 0.05,
  lda.cutoff = 2,
  wilcoxon.within.subclass = FALSE,
  one.against.one = FALSE,
  mult.test.correction = 0,
  make.lefse.plots = FALSE,
  by_otus = FALSE,
  levels = phyloseq::rank_names(phy)
)
}
\arguments{
\item{phy}{the phyloseq object containing data}

\item{class}{variable to be tested by LEfSe. This must be a variable in sample_data(phy)}

\item{subclass}{variable to perform subclass testing. This step is skipped if it is not specified.}

\item{subject}{variable referring to the subject level designation. This is only necessary if multiple samples per subject.}

\item{anova.alpha}{alpha level of the kruskal-wallis testing. Default is 0.05}

\item{wilcoxon.alpha}{alpha level at which to perform wilcoxon testing of subclass testing. Default is 0.05.}

\item{lda.cutoff}{Cutoff LDA to be reported. Default is 2.0.}

\item{wilcoxon.within.subclass}{Set whether to perform Wilcox test only among subclasses with the same name (Default FALSE)}

\item{one.against.one}{for multiclass tasks, sets whether testing is performed one-against-one (TRUE - more strict) or one-against-all (FALSE - less strict)}

\item{mult.test.correction}{Can be {0,1,2}. Set the multiple testing correction options. 0 no correction (more strict, default), 1 correction for independent comparisons, 2 correction for independent comparison}

\item{levels}{Taxonomic levels to be tested. Default is to test all levels: rank_names(phy)}
}
\value{
Returns data
}
\description{
Run LEfSe (LDA Effect Size) analysis using a phyloseq object.
}
\details{
This function performs the analysis using the following steps.
(1) Creates lefse.txt from phyloseq data, a tab-delimited file in the format input required by LEfSe.
(2) Executes format_input.py to further format lefse.txt into lefse.in
(3) Executes run_lefse.py, which does the actual analysis and produces lefse.res.
(4) Executes plot_res.py and plot_cladogram.py, which create the graphics for LEfSe.
Note that you must have command-line lefse.py installed... this function is just an R wrapper for the original Huttenhower scripts.
}
\examples{
lefse.tbl <- lefse(phy1,class="CDI",subclass="Sex")
}
