% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/yingtools2.R
\name{replace_grep_data}
\alias{replace_grep_data}
\title{Replace and Extract Regular Expression Patterns for Data Frames}
\usage{
replace_grep_data(
  data,
  recodes,
  var,
  newvar = NULL,
  hits = NULL,
  ignore.case = TRUE,
  collapse.fn = NULL
)
}
\arguments{
\item{data}{the data frame to be manipulated.}

\item{recodes}{a vector of regular expressions. Can be named or unnamed; if named, the names are the regular expression, and the value is the replacement text.}

\item{var}{the bare character vector to be searched.}

\item{newvar}{bare name of column to hold the replaced version of \code{var}. If \code{NULL} (default), \code{var} will be overwritten.}

\item{hits}{bare name of column to hold the text hits. If \code{NULL} (default), hits are not stored. This will store a list of extracted text, similar to the output of \code{str_extract_all()}}

\item{ignore.case}{whether or not to ignore case, passed to regular expression. Default is \code{TRUE}}

\item{collapse.fn}{optional function to apply to each element of \code{hits}, to create an atomic vector Non-hits are ignored.}
}
\value{
returns the data with the above replacement text and stored hits.
}
\description{
For a given column of text, search for list of Regex patterns. Perform replacements and save the hits in another column.
This is roughly equivalent to repeatedly running '\code{stringr::str_replace_all()} and/or \code{stringr::str_extract_all()} on the same
column of text.
}
\details{
This function attempts to perform multiple text manipulations (replacements and/or extractions) in an easy and efficient way.
It can be faster than manually running '\code{stringr::str_replace_all()} and/or \code{stringr::str_extract_all()} for a few
reasons: (1) it performs one search for both replacement and extraction, (2) it performs an initial search and ignores any rows
that didn't match, which saves time especially if most rows are not hits.
}
\examples{
library(stringr)
recodes <- c("<s-word>"="\\\\bs[a-z]+","<r-word>"="\\\\br[a-z]+")
data <- tibble(text=stringr::sentences)
data \%>\% replace_grep_data(recodes,text,new.sentence,hits)
data \%>\% replace_grep_data(recodes,text,new.text,hits,collapse.fn=~paste(names(.),"=",.,collapse="; "))
}
