% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/yingtools2.R
\name{traverse}
\alias{traverse}
\title{Traverse a list (or other iterable object)}
\usage{
traverse(
  .obj,
  expr = NULL,
  .name = NULL,
  .level = 1,
  .parents = list(caller_env = rlang:::caller_env())
)
}
\arguments{
\item{.obj}{object list to be traversed}

\item{expr}{expression to run on each object in the list. Reserved words can be used, as follows:
\itemize{
\item \code{.obj}: the current object
\item \code{.name}: a name for the object
\item \code{.class}: the class of the object
\item \code{.level}: an integer specifying the number of levels of recursion.
\item \code{.parents}: a list of parent objects (first element is most direct parent)
\item \code{.circular}: whether the object points to a parent
}}

\item{.name}{used for passing information to other instances. Leave these be.}

\item{.level}{used for passing information to other instances. Leave these be.}

\item{.parents}{used for passing information to other instances. Leave these be.}
}
\value{
a list of objects generated from \code{expr}
}
\description{
Everyone knows I like recursion. This function recursively iterates through nested lists and runs a specified expression.
}
\examples{
g <- ggplot(mtcars,aes(x=mpg,y=hp)) + geom_point()
g.info <- traverse(g,expr=tibble(name=.name,class=.class,level=.level)) \%>\%
  bind_rows()
g.info
}
